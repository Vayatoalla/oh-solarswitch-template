uid: uhm:solar_switch
label: Solar Switch
description: This template creates a very simple rule that will allow you to control the state of a device based on the electricity that your house is spending. I will call this device "the load".
configDescriptions:
  - name: SolarSwitch
    type: TEXT
    context: item
    filterCriteria:
      - name: type
        value: Group
    label: Group of Triggering Items
    description: Group whose members should trigger this rule. At least SolarSwitch should be here.
    required: true
  - name: GridPower
    type: TEXT
    context: item
    label: House Power Meter
    description: Item that will give us the electricity that your house is spending.
    required: true
  - name: TheLoad
    type: TEXT
    context: item
    label: Load to control
    description: The load that this rule will control.
    required: true
  - name: SolarControllaststate
    type: TEXT
    context: item
    filterCriteria:
      - name: type
        value: String
    label: Control load if sun
    description: Item to store the last state that was set by this rule.
    required: true
  - name: SwitchOnThreshold
    type: TEXT
    context: item
    filterCriteria:
      - name: type
        value: number
    label: Switch On Threshold
    description: Switch that sets the threshold to switch on the load
    required: true
  - name: SwitchOffThreshold
    type: TEXT
    context: item
    filterCriteria:
      - name: type
        value: number
    label: Switch Off Threshold
    description: Switch that sets the threshold to switch off the load
    required: true
  - name: NotificationUser
    type: TEXT
    context: item
    filterCriteria:
      - name: type
        value: number
    label: Openhab User to send change notifications
    defaultValue: nouser@mail.account
    description: Leave the default value if you dont want to receive an Openhab notification on changes
    required: false

triggers:
  - id: "2"
    configuration:
      itemName: "{{SolarSwitch}}"
    type: core.ItemStateChangeTrigger
conditions: []
actions:
  - inputs: {}
    id: "1"
    configuration:
      type: application/javascript;version=ECMAScript-2021
      script: >-
        var notificationsuser = '{{NotificationUser}}';
        var logger = log('rules_tools.'+ruleUID);
        var solarswitch = items.getItem("{{SolarSwitch}}");
        var laststate = items.getItem("{{SolarControllaststate}}");
        var onthreshold = items.getItem("{{SwitchOnThreshold}}").state;
        var offthreshold = items.getItem("{{SwitchOffThreshold}}").state;
        var gridpower = -items.getItem("{{GridPower}}").state;
        var theload = items.getItem("{{TheLoad}}");

        //laststate posible values:
        //ON, JUSTON, OFF, JUSTOFF, SOLARSWITCHOFF

        if(solarswitch.state=='OFF') {
          if(notificationsuser != 'nouser@mail.account') {actions.NotificationAction.sendNotification(notificationsuser, "Solar switch off")};
          theload.sendCommandIfDifferent('OFF');
          laststate.postUpdate('SOLARSWITCHOFF');
        }

        else {
          if(laststate.state=='SOLARSWITCHOFF') {
            logger.info('Someone just initiated Solar Switch');
            actions.NotificationAction.sendNotification("nouser@mail.account", "Starting SolarSwitch");
            laststate.postUpdate(theload.state);
          }
          if(laststate.state=='ON') {
            if (theload.state=='OFF') {
              if(notificationsuser != 'nouser@mail.account') {actions.NotificationAction.sendNotification(notificationsuser, "Solar Switch: Someone switched off manually the device, deactivating the rule")};
              laststate.postUpdate('SOLARSWITCHOFF');
              solarswitch.sendCommand('OFF');
            }
            else {
              if (gridpower<offthreshold) {
                theload.sendCommandIfDifferent('OFF');
                laststate.postUpdate('JUSTOFF');
                if(notificationsuser != 'nouser@mail.account') {actions.NotificationAction.sendNotification(notificationsuser, "Solar Switch: solar power is lower than the off threshold, switching off the device")};
              }
            }
          }
          if(laststate.state=='OFF') {
            if (theload.state=='ON') {
              if(notificationsuser != 'nouser@mail.account') {actions.NotificationAction.sendNotification(notificationsuser, "Solar Switch: Someone switched on manually the device, deactivating the rule")};
              laststate.postUpdate('SOLARSWITCHOFF');
              solarswitch.sendCommand('OFF');
            }
            else {
              if (gridpower>onthreshold) {
                theload.sendCommandIfDifferent('ON');
                laststate.postUpdate('JUSTON');
                if(notificationsuser != 'nouser@mail.account') {actions.NotificationAction.sendNotification(notificationsuser, "Solar Switch: solar power is higher than the on threshold, switching on the device")};
              }    
            }
          }  
          if(laststate.state=='JUSTON') {
            //put here the action if juston
            laststate.postUpdate('ON');
          }
          if(laststate.state=='JUSTOFF') {
            //put here the action if justoff
            laststate.postUpdate('OFF');
          }
        }
    type: script.ScriptAction
